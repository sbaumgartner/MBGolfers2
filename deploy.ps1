# MBGolfers2 Deployment Script
# This script deploys the infrastructure and application to AWS

param(
    [string]$Environment = "dev",
    [string]$Region = "us-east-1",
    [switch]$SkipBuild,
    [switch]$DestroyOnly
)

Write-Host "üèåÔ∏è MBGolfers2 Deployment Script" -ForegroundColor Green
Write-Host "Environment: $Environment" -ForegroundColor Yellow
Write-Host "Region: $Region" -ForegroundColor Yellow

# Check prerequisites
Write-Host "`nüìã Checking prerequisites..." -ForegroundColor Blue

# Check if AWS CLI is configured
try {
    $awsAccount = aws sts get-caller-identity --query "Account" --output text 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ AWS CLI configured for account: $awsAccount" -ForegroundColor Green
    } else {
        throw "AWS CLI not configured"
    }
} catch {
    Write-Host "‚ùå AWS CLI not configured. Please run 'aws configure'" -ForegroundColor Red
    exit 1
}

# Check if Terraform is installed
try {
    $terraformVersion = terraform version -json | ConvertFrom-Json
    Write-Host "‚úÖ Terraform installed: $($terraformVersion.terraform_version)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Terraform not installed. Please install Terraform 1.0+" -ForegroundColor Red
    exit 1
}

if ($DestroyOnly) {
    Write-Host "`nüí• DESTROYING INFRASTRUCTURE..." -ForegroundColor Red
    Write-Host "This will delete all AWS resources. Are you sure? (y/N)" -ForegroundColor Yellow
    $confirmation = Read-Host
    if ($confirmation -ne 'y' -and $confirmation -ne 'Y') {
        Write-Host "Deployment cancelled." -ForegroundColor Yellow
        exit 0
    }
    
    Set-Location terraform
    terraform destroy -auto-approve -var="environment=$Environment" -var="aws_region=$Region"
    exit $LASTEXITCODE
}

# Package Lambda functions
if (-not $SkipBuild) {
    Write-Host "`nüì¶ Packaging Lambda functions..." -ForegroundColor Blue
    
    Set-Location terraform/lambda_functions
    
    # Install dependencies
    if (Test-Path "node_modules") {
        Remove-Item -Recurse -Force node_modules
    }
    npm install --production
    
    # Package Playgroups function
    if (Test-Path "playgroups.zip") {
        Remove-Item playgroups.zip
    }
    Copy-Item playgroups.js index.js
    if (Get-Command "7z" -ErrorAction SilentlyContinue) {
        7z a playgroups.zip index.js node_modules
    } else {
        Compress-Archive -Path index.js,node_modules -DestinationPath playgroups.zip
    }
    Remove-Item index.js
    
    # Package Tee Times function
    if (Test-Path "teetimes.zip") {
        Remove-Item teetimes.zip
    }
    Copy-Item teetimes.js index.js
    if (Get-Command "7z" -ErrorAction SilentlyContinue) {
        7z a teetimes.zip index.js node_modules
    } else {
        Compress-Archive -Path index.js,node_modules -DestinationPath teetimes.zip
    }
    Remove-Item index.js
    
    Write-Host "‚úÖ Lambda functions packaged" -ForegroundColor Green
    Set-Location ../..
}

# Deploy infrastructure with Terraform
Write-Host "`nüöÄ Deploying infrastructure with Terraform..." -ForegroundColor Blue

Set-Location terraform

# Initialize Terraform
terraform init

# Create terraform.tfvars if it doesn't exist
if (-not (Test-Path "terraform.tfvars")) {
    Write-Host "üìù Creating terraform.tfvars from example..." -ForegroundColor Yellow
    Copy-Item terraform.tfvars.example terraform.tfvars
    Write-Host "‚ö†Ô∏è  Please review and update terraform.tfvars with your settings" -ForegroundColor Yellow
}

# Plan deployment
Write-Host "`nüìã Planning deployment..." -ForegroundColor Blue
terraform plan -var="environment=$Environment" -var="aws_region=$Region"

# Apply deployment
Write-Host "`nüöÄ Applying deployment..." -ForegroundColor Blue
terraform apply -auto-approve -var="environment=$Environment" -var="aws_region=$Region"

if ($LASTEXITCODE -eq 0) {
    Write-Host "`n‚úÖ Infrastructure deployment completed!" -ForegroundColor Green
    
    # Get outputs
    $cognitoUserPoolId = terraform output -raw user_pool_id
    $cognitoClientId = terraform output -raw user_pool_client_id
    $apiUrl = terraform output -raw api_gateway_invoke_url
    
    Write-Host "`nüìã Deployment Information:" -ForegroundColor Blue
    Write-Host "Cognito User Pool ID: $cognitoUserPoolId" -ForegroundColor Yellow
    Write-Host "Cognito Client ID: $cognitoClientId" -ForegroundColor Yellow
    Write-Host "API Gateway URL: $apiUrl" -ForegroundColor Yellow
    
    # Create environment file for frontend
    Set-Location ..
    $envContent = @"
# MBGolfers2 Environment Configuration
# Generated by deployment script

REACT_APP_USER_POOL_ID=$cognitoUserPoolId
REACT_APP_USER_POOL_CLIENT_ID=$cognitoClientId
REACT_APP_API_URL=$apiUrl
REACT_APP_AWS_REGION=$Region
REACT_APP_ENVIRONMENT=$Environment
"@
    
    $envContent | Out-File -FilePath ".env.local" -Encoding UTF8
    Write-Host "‚úÖ Created .env.local for frontend configuration" -ForegroundColor Green
    
    Write-Host "`nüéØ Next Steps:" -ForegroundColor Blue
    Write-Host "1. Run 'npm install' to install frontend dependencies" -ForegroundColor White
    Write-Host "2. Run 'npm start' to start the development server" -ForegroundColor White
    Write-Host "3. Open http://localhost:3000 to view the application" -ForegroundColor White
    
} else {
    Write-Host "`n‚ùå Infrastructure deployment failed!" -ForegroundColor Red
    exit 1
}

Set-Location ..